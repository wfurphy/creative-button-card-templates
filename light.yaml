#### WF::BCT ############| Light |############ github.com/wfurphy #####>
light:
  template:
    - button_landscape
  variables:
    _height: 80px
    _attribute_icon_color: var(--state-icon-color)
  color: auto
  show_label: true
  styles:
    label:
      - display: "[[[ return entity.state == 'on' ? 'block' : 'none' ]]]"
  label: >
    [[[
      let styles = ` <style>
          .cbc-l-icon {
            color: ${variables._attribute_icon_color};
            width: 15px;
            margin-right: 1px;
          }
          .cbc-l-icon.last {
            margin-right: 2px;
          }
          .cbc-l-unit {
            color: var(--secondary-text-color);
            font-size: 85%;
          }
          .cbc-l-rgb {
            font-size: 95%;
          }
        </style>
        `

      if (!entity) return styles + `<elt><ha-icon icon="mdi:wifi-cancel" class="cbc-l-icon"></ha-icon><span class="cbc-l-value">Unavailable</span></elt>`

      if (entity.attributes.effect && entity.attributes.effect !== "none")
        return styles + `<elt><ha-icon icon="mdi:creation" class="cbc-l-icon"></ha-icon><span class="cbc-l-value">${entity.attributes.effect}</span></elt>`

      const bpct = Math.round(entity.attributes.brightness / 2.55)
      const rgb = String(entity.attributes.rgb_color).split(',')
      let clr = `<span class="cbc-l-rgb" style="color: #ad0826;">${rgb[0]}</span>,<span class="cbc-l-rgb" style="color: #00b558;">${rgb[1]}</span>,<span class="cbc-l-rgb" style="color: #1a89f5;">${rgb[2]}</span>`
      let ci = 'mdi:palette'

      if (entity.attributes.color_mode == 'color_temp') {
        clr = `${entity.attributes.color_temp_kelvin} <span class="cbc-l-unit">K</span>`
      //  ci = 'mdi:thermometer'
      }
      
      let bi = 'mdi:brightness-2'
      if (bpct >= 90) { bi = 'mdi:brightness-7' } else
      if (bpct >= 75) { bi = 'mdi:brightness-6' } else
      if (bpct >= 50) { bi = 'mdi:brightness-5' } else
      if (bpct >= 25) { bi = 'mdi:brightness-4' } else
      if (bpct >= 10) { bi = 'mdi:brightness-3' }

      return styles + `
        <elt>
          <ha-icon icon="${bi}" class="cbc-l-icon"></ha-icon><span class="cbc-l-val">${bpct}</span><span class="cbc-l-unit">%</span>
          <ha-icon icon="${ci}" class="cbc-l-icon last"></ha-icon>${clr}
        </elt>
      `
    ]]]

#### From when we had to convert the color_temp, now kelvin is standard in HA ###
# Math.round(1000000/entity.attributes.color_temp, 0)
# Â°K
#########################################################################/
