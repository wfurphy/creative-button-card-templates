####{ CreativeBC }####| Light |####[ github.com/wfurphy/creative-button-card-templates ]####>
# ::Changes::0.3::> Fixed z-index, add brightness & effects
light:
  template: button_landscape
  variables:
    __grid: >
      [[[
        return function(type, bs, er = 1) {
          if (entity.state == 'off') { bs.info = false }

          
          switch (type) {
            case 'areas':
              let areas = `"i i n"`
              const ref = {
                info: 'l',
                brightness_strip: 'bc',
                effect_selector: 'es'
              }

              Object.keys(bs).forEach(key => {
                  areas += bs[key] ? `
                  "i i ${ref[key]}"` : ''
              })
              return areas
            case 'rows':
              const rq = Object.values(bs).filter((v) => v).length
              return `repeat(${rq+er}, 1fr)`
          }

          return ''
        }
      ]]]
    attribute_icon_color: var(--state-icon-color)
    rgb_symbols:
      - R
      - G
      - B
    show:
      info: true
      brightness_strip: false
      effect_selector: false
    strip_show:
      icon: true
      value: false
      fade: true
    strip_items: []
  color: auto
  show_label: true
  state:
    - id: cbc_on
      styles:
        label:
          - display: "[[[ return variables.show.info ? 'block' : 'none' ]]]"
    - id: cbc_off
      styles:
        label:
          - display: none
  styles:
    grid:
      - grid-template-areas: "[[[ return variables.__grid('areas', variables.show) ]]]"
      - grid-template-columns: 1fr 1fr 4fr
      - grid-template-rows: "[[[ return variables.__grid('rows', variables.show) ]]]"
    label:
      - display: "[[[ return variables.show.info ? 'block' : 'none' ]]]"
      - overflow: visible
      - text-overflow: visible
      - align-self: start
    name:
      - justify-self: start
      - align-self: center
    custom_fields:
      bc:
        - z-index: 3
        - align-self: center
        - justify-self: start
        - width: 90%
        - display: "[[[ return variables.show.brightness_strip ? 'block' : 'none' ]]]"
        - padding: 0
      es:
        - z-index: 4
        - align-self: center
        - justify-self: start
        - display: "[[[ return variables.show.effect_selector ? 'block' : 'none' ]]]"
        - padding: 0
        - opacity: 0.6
  label: >
    [[[
      const styles = `
        <style>
          .cbc-l-icon {
            color: ${variables.attribute_icon_color};
            width: 15px;
            margin-right: 1px;
          }
          .cbc-l-icon.effect {
            margin-left: 2px;
          }
          .cbc-l-icon.last {
            margin-right: 2px;
          }
          .cbc-l-unit {
            color: var(--secondary-text-color);
            font-size: 85%;
          }
          .cbc-l-rgb {
            font-size: 12px;
            word-spacing: -4px;
            letter-spacing: -1px
          }
          .cbc-l-rgb.cbc-i {
            font-weight: bold;
            margin-left: -1px;
          }
          .cbc-l-value {
            margin-left: 3px;
          }
          .cbc-l-value-effect {
            text-transform: capitalize;
          }
        </style>`

      if (!entity) return `${styles}<elt><ha-icon icon="mdi:wifi-cancel" class="cbc-l-icon"></ha-icon><span class="cbc-l-value">Unavailable</span></elt>`

      const bpct = Math.round(entity.attributes.brightness / 2.55)
      let bi = 'mdi:brightness-2'
      if (bpct >= 90) { bi = 'mdi:brightness-7' } else
      if (bpct >= 75) { bi = 'mdi:brightness-6' } else
      if (bpct >= 50) { bi = 'mdi:brightness-5' } else
      if (bpct >= 25) { bi = 'mdi:brightness-4' } else
      if (bpct >= 10) { bi = 'mdi:brightness-3' }

      const brt = `<ha-icon icon="${bi}" class="cbc-l-icon"></ha-icon><span class="cbc-l-val">${bpct}</span><span class="cbc-l-unit">%</span>`

      if (entity.attributes.effect && entity.attributes.effect !== "effect_stop") {
        const efct = !variables.show.effect_selector ? entity.attributes.effect.replace('effect', '').replace('_', ' ') : '...'
        return `${styles}<elt>${brt}<ha-icon icon="mdi:creation" class="cbc-l-icon effect"></ha-icon><span class="cbc-l-value-effect">${efct}</span></elt>`
      }

      let clr, ci = ''

      if (entity.attributes.color_mode == 'color_temp') {
        ci = `<ha-icon icon="mdi:palette" class="cbc-l-icon last"></ha-icon>`
        clr = `${entity.attributes.color_temp_kelvin} <span class="cbc-l-unit">K</span>`
      } else {
        const rgb = String(entity.attributes.rgb_color).split(',')
        clr = `
        <span class="ellipsis">
          <span class="cbc-l-rgb cbc-i" style="color: #ad0826;">${variables.rgb_symbols[0]}</span><span class="cbc-l-rgb">${rgb[0]}</span>
          <span class="cbc-l-rgb cbc-i" style="color: #00b558;">${variables.rgb_symbols[1]}</span><span class="cbc-l-rgb">${rgb[1]}</span>
          <span class="cbc-l-rgb cbc-i" style="color: #1a89f5;">${variables.rgb_symbols[2]}</span><span class="cbc-l-rgb">${rgb[2]}</span>
        </span>
        `
      }

      return `
        ${styles}
        <elt>
          ${brt}
          ${ci}${clr}
        </elt>
      `
    ]]]
  custom_fields:
    bc:
      card:
        type: custom:button-card
        template: 
          - value_strip
          - transparent
        entity: "[[[ return entity.entity_id ]]]"
        variables:
          type: brightness
          show: "[[[ return variables.strip_show ]]]"
          items: "[[[ return variables.strip_items ]]]"
        styles:
          card:
            - max-height: 25px
            - max-width: 200px
    es: 
      card:
        type: custom:button-card
        template:
          - transparent
          - show_only_name
        styles:
          card:
            - padding: 0
          name:
            - display: grid
            - grid: '"i s" 1fr / 20px 1fr'
        name: >
          [[[ 
            if (!variables.show.effect_selector || !entity.attributes.effect_list || !Array.isArray(entity.attributes.effect_list)) return ''

            const entid = entity.entity_id.replace('light.','').replace('_','-')
            let options = `<option id="cbc-es-opt-none" class="cbc-option cbc-es cbce-${entid}" value="effect_stop">No Effects</option>`

            entity.attributes.effect_list.forEach((val, i) => {
              const selected = entity.attributes.effect === val ? 'selected' : ''
              let label = val.replace('effect_', '').replace('_', ' ')
              label = label.charAt(0).toUpperCase() + label.slice(1)
              options += `
                <option id="cbc-es-opt-${i}" class="cbc-option cbc-es cbce-${entid} ellipsis" style="text-transform: capitalize;" value="${val}" ${selected}>${label}</option>`
            })

            if (!document.getElementById('cbcjs-script')) {
              const script = document.createElement("script");
              script.id = 'cbcjs-script'
              script.innerHTML = `
                cbcJS = {
                  version: "0.3.0",
                };
              `
              document.head.appendChild(script);
            }

            cbcJS.runLightEffect = function(ef, entity) {
              this.hass.callService('light', 'turn_on', {
                entity_id: entity,
                effect: ef,
              })
            },

            cbcJS.hass = hass
                  
            return `
                <style>
                  .cbc-div {
                    width: 100%;
                  }
                  .cbc-icon {
                    width: 18px;
                    padding-right: 2px;
                  }
                  .cbc-select {
                    width: 90%;
                    background: none;
                    border: 0;
                  }
                  .cbc-option {
                    text-transform: capitalize;
                  }
                </style>
                <div id="cbc-es-icon" class="cbc-div cbc-es cbce-${entid}" style="grid-area: i / i / i / i;">
                  <ha-icon id="cbc-es-icon" class="cbc-icon cbc-es cbce-${entid}" icon="mdi:creation"></ha-icon>
                </div>
                <div id="cbc-es-select" class="cbc-div cbc-es cbce-${entid}" style="grid-area: s / s / s / s;">
                  <select id="cbc-es-select" class="cbc-select cbc-es cbce-${entid}" onchange="cbcJS.runLightEffect(this.options[this.selectedIndex].value, '${entity.entity_id}')">
                    ${options}
                  </select>
                </div>
            `
          ]]]


# From when we had to convert the color_temp, now kelvin is standard in HA
# Math.round(1000000/entity.attributes.color_temp, 0)
# Â°K
#########################################################################/
