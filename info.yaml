info_helper:
  variables:
    _item: {}
    _decimals: 0
    _attribute:
    _state:
    _name:
    _units:
    _icon_color:
    _prefix_units: false
    __make: >
      [[[
        return function(vars) {
          vars.__output = function(out, vars) {
            vars.__out = out
            if(vars._name && String(vars._name).length > 0) {
              vars.__name = vars._name
            } else {
              let att = String(vars._attribute)
              vars.__name = att.length > 0 ? att.replace('_', ' ') : entity?.attributes.friendly_name
            }

            return vars
          }

          const out = {
            html: '',
            units: String(vars._units || entity?.attributes.unit_of_measurement || ''),
            tag: vars._layout == 'stack' ? 'div' : 'span',
            prefix: !!vars._prefix_units
          }

          if (vars._state) {
            out.state = vars._state
          } else if (vars._attribute && entity) {
            out.state = entity.attributes[vars._attribute]
          } else {
            out.state = entity?.state
          }

          if (out.units && ['$', 'â‚¬'].includes(out.units)) {
            out.tag = 'span'
            out.state = Number(out.state).toFixed(2)
            out.prefix = true
          } else if (!isNaN(out.state)) {
            out.state = +Number(out.state).toFixed(vars._decimals)
          }
          
          if (out.prefix) {
            vars.__html = `<${out.tag} class="cbc-units layout-${out.tag}">${out.units}</${out.tag}><${out.tag} class="cbc-state">${out.state}</${out.tag}>`
          } else {
            vars.__html = `<${out.tag} class="cbc-state">${out.state}</${out.tag}><${out.tag} class="cbc-units layout-${out.tag}">${out.units}</${out.tag}>`
          }

          return vars.__output(out, vars) // :::::::::::::::: __output ::::::::::::::::::::::::::>
        }
      ]]]
    __getVars: >
      [[[
        return function(vars) {
          if(!vars?.__html || Object.keys(vars.__item).length)

          if(vars?._item && Object.keys(vars._item).length) {
            const ik = Object.keys(vars._item)
            const ikl = ik.length

            if(ikl > 0) {
              for (let i = 0; i <= ikl; i++) {
                if(i === ikl) {
                  return vars.__make(vars) // :::::::::::::::: __make :::::::::::::::::::::::::::>
                }
                let key = ik[i]
                vars['_'+key] = vars._item[key]
              }
            }
          }

          return vars.__make(vars) // :::::::::::::::::::::: __make :::::::::::::::::::::::::::::>
        }
      ]]]

#### WF::BCT ############| Info Mini |############ github.com/wfurphy #####>
info_mini:
  template:
    - info_helper
    - button_mini
    # - style_helper
    - no_actions
  variables:
    _item: {}
    __type: mini
    _spin: false
    ####/ _layout / string { stack|inline } / default: stack /####>
    _layout: stack
    _icon_color:
    _color:
    _width: 60px
    _style:
      opacity:
        icon: 0.2
    __css: |
        <style>
          .cbc-units {
            font-size: 70%;
            color: var(--secondary-text-color);
          }
          div.cbc-units {
            font-size: 70% !important;
            margin-top: -4px;
          }
        </style>
  show_icon: true
  show_state: true
  show_name: false
  state:
    - id: _cbc_spin
      operator: template
      value: "[[[ return variables._spin ]]]"
      spin: true
  state_display: >
        [[[
          return variables.__css + (variables = variables.__getVars(variables)).__html
        ]]]
  styles:
    grid:
      - padding: 6px
    card:
      - padding: 0
      - margin: 0
    icon:
      - opacity: "[[[ return this.___config.template.includes('transparent') ? 1 : variables._style.opacity.icon ]]]"
      - justify-self: center
      - align-self: center
      - max-height: 200%
      - max-width: 200%
      - height: 48px
      - width: 48px
      - margin-top: -3px
      - padding: 0
      - color: >
          [[[
            if(variables._color) { return variables._color } else
            if(variables._icon_color && variables._icon_color !== 'var(--state-icon-color)') { return variables._icon_color }
            return this.___config.template.includes('transparent') ? 'var( --ha-card-background, var(--card-background-color, white) )' : 'var(--state-icon-color)'
          ]]]
    state:
      - position: fixed
      - justify-self: end
      - align-self: end
      - font-size: 18px
      # - font-weight: bold
      - margin-top: 0
      - margin-bottom: 0
      - overflow: visible
  # extra_styles: |
  #   .cbc-units {
  #     font-size: 75%;
  #     color: var(--secondary-text-color)
  #   }
    # div.cbc-units {
    #   font-size: 70% !important;
    #   margin-top: -4px;
    # }

#### Info Item ######################################################>
info_item:
  template:
    - info_helper
    - style_helper
    - no_actions
    - transparent
  variables:
    _item: {}
    _icon_color: "var(--state-icon-color)"
    # _name: ''
    # _attribute: ''
    _color:
    _style:
      opacity:
        icon: 0.4
    __css: |
      <style>
        .cbc-units {
          font-size: 70%;
          color: var(--secondary-text-color);
        }
        #img-cell {
          overflow: visible !important;
        }
      </style>

  show_state: true
  state_display: "[[[ return variables.__css + (variables = variables.__getVars(variables)).__html ]]]"
  name: "[[[ return (variables = variables.__getVars(variables)).__name ]]]"
  styles:
    grid:
      - position: relative
      - grid-template-areas: '"s s s i" "s s s i" "n n n i"'
      - grid-template-columns: max-content
      - grid-template-rows: 1fr 1fr 1fr
      - overflow: visible
      - padding: 6px
    card:
      - height: 50px
      - justify-self: center
      - align-self: center
      - padding: 2px 2px 6px 2px
      - overflow: visible
    icon:
      - position: absolute
      # - margin-left: -10%
      - opacity: 0.3
      - justify-self: center 
      - align-self: center
      - min-width: 60px
      - min-height: 60px
      - overflow: visible
      - color: "[[[ return variables._color || variables._icon_color ]]]"
    name:
      - color: var(--secondary-text-color)
      - justify-self: end
      - align-self: start
      - font-size: 12px
      - text-justify: right
      - overflow: visible
      - text-transform: uppercase
    state:
      - justify-self: end
      - align-self: end
      - font-size: 20px
      - text-justify: right
      - overflow: visible

#### Info Icon ######################################################>
info_icon:
  icon: "[[[ return variables._icon ]]]"

#### Info Card ######################################################>
info:
  template:
    - no_actions
  variables:
    _items: []
    _mini: false
    _icon_color: "var(--state-icon-color)"
  show_icon: false
  show_name: false
  card_size: 1
  styles:
    grid:
      - grid-template-areas: >
          [[[
            variables.__qty = variables._items.length
            let areas = '\"dts1'

            for(let i = 1; i < variables.__qty; i++) {
              areas += ` dts${i+1}`
            }

            return areas += '\"'
          ]]]
      - grid-template-columns: "[[[ return `repeat(${variables.__qty}, 1fr)` ]]]"
      - grid-template-rows: 1fr
      - justify-items: center
      - align-items: center
      - text-align: center
      - padding: 5px 15px 5px 10px
      - height: 50px
    card:
      - height: 50px
      - justify-self: center
      - align-self: center
      - text-align: center
      - padding: 0
      - overflow: hidden
    custom_fields:
      dts1:
        - justify-self: center
        - align-self: center
        - display: "[[[ return variables.__qty >= 1 ? 'block' : 'none' ]]]"
        - overflow: visible
        - margin: auto
        - width: 100%
      dts2:
        - justify-self: center
        - align-self: center
        - display: "[[[ return variables.__qty >= 2 ? 'block' : 'none' ]]]"
        - overflow: visible
        - margin: auto
        - width: 100%
      dts3:
        - justify-self: center
        - align-self: center
        - display: "[[[ return variables.__qty >= 3 ? 'block' : 'none' ]]]"
        - overflow: visible
        - margin: auto
        - width: 100%
      dts4:
        - justify-self: center
        - align-self: center
        - display: "[[[return variables.__qty >= 4 ? 'block' : 'none' ]]]"
        - overflow: visible
        - margin: auto
        - width: 100%
  extra_styles: |
    button-card {
      max-width: 100% !important;
    }
  custom_fields:
    dts1:
      card:
        type: custom:button-card
        template:
          - "[[[ return variables.__qty >= 1 && (variables._mini || variables._items[0].mini) ? 'info_mini' : 'info_item' ]]]"
          - "[[[ return variables.__qty >= 1 && variables._items[0].icon ? 'info_icon' : 'empty' ]]]"
          - transparent
        variables:
          _icon_color: "[[[ return variables.__qty >= 1 ? variables._icon_color : null ]]]"
          _item: "[[[ return variables.__qty >= 1 ? variables._items[0] : null ]]]"
        entity: "[[[ return variables.__qty >= 1 ? variables._items[0].entity_id : null ]]]"
        # name: "[[[ return variables.__qty >= 1 ? variables._items[0].name : null ]]]"

    dts2:
      card:
        type: custom:button-card
        template:
          - "[[[ return variables.__qty >= 2 && (variables._mini || variables._items[1].mini) ? 'info_mini' : 'info_item' ]]]"
          - "[[[ return variables.__qty >= 2 && variables._items[1].icon ? 'info_icon' : 'empty' ]]]"
          - transparent
        variables:
          _icon_color: "[[[ return variables.__qty >= 2 ? variables._icon_color : null ]]]"
          _item: "[[[ return variables.__qty >= 2 ? variables._items[1] : null ]]]"
        entity: "[[[ return variables.__qty >= 2 ? variables._items[1].entity_id : null ]]]"
        # name: "[[[ return variables.__qty >= 2 ? variables._items[1].name : null ]]]"

    dts3:
      card:
        type: custom:button-card
        template:
          - "[[[ return variables.__qty >= 3 && (variables._mini || variables._items[2].mini) ? 'info_mini' : 'info_item' ]]]"
          - "[[[ return variables.__qty >= 3 && variables._items[2].icon ? 'info_icon' : 'empty' ]]]"
          - transparent
        variables:
          _icon_color: "[[[ return variables.__qty >= 3 ? variables._icon_color : null ]]]"
          _item: "[[[ return variables.__qty >= 3 ? variables._items[2] : null ]]]"
        entity: "[[[ return variables.__qty >= 3 ? variables._items[2].entity_id : null ]]]"
        # name: "[[[ return variables.__qty >= 3 ? variables._items[2].name : null ]]]"

    dts4:
      card:
        type: custom:button-card
        template:
          - "[[[ return variables.__qty >= 4 && (variables._mini || variables._items[3].mini) ? 'info_mini' : 'info_item' ]]]"
          - "[[[ return variables.__qty >= 4 && variables._items[3].icon ? 'info_icon' : 'empty' ]]]"
          - transparent
        variables:
          _icon_color: "[[[ return variables.__qty >= 4 ? variables._icon_color : null ]]]"
          _item: "[[[ return variables.__qty >= 4 ? variables._items[3] : null ]]]"
        entity: "[[[ return variables.__qty >= 4 ? variables._items[3].entity_id : null ]]]"
        # name: "[[[ return variables.__qty >= 4 ? variables._items[3].name : null ]]]"

        
#########################################################################/

