#### WF::BCT ############| Light Grid Helper |############ github.com/wfurphy #####>
light_grid_helper:
  __items: []
  variables:
    __defaults:
      merge:
        entity_id:
        icon: mdi:lightbulb
        symbol:
        display: "block"
      filler:
        entity_id: "[[[ return entity.entity_id ]]]"
        icon: mdi:lightbulb
        symbol: mdi:cancel
        display: "none"
    __grid:
      areas: ""
      columns: ""
      rows: ""
      columns_min: 2
      columns_max: 6
      column_unit: '1fr'
      pattern:
        - seq: false
          start: 2
          limit: false
          area_id: 'n'
          area_pre: 'i i'
          area_post: ''
          row_unit: 1fr
        - seq: true
          start: 0
          limit: false
          area_id: li
          area_pre: ''
          area_post: ''
          row_unit: 2fr
        - area_id: 'l'
          start: 2
          limit: false
          area_pre: ''
          area_post: ''
          seq: false
          row_unit: 1fr
    __buildGrid: >
      [[[        
        return function(vars) {

          if (!vars._items || !Array.isArray(vars._items) || !vars._items.length) {
            
            if(!entity || !entity.attributes.entity_id) {
              throw new Error("Cannot find entity_ids. Ensure entity is a light group or provide a list of items")
            }

            const lights = String(entity.attributes.entity_id).split(',')

            for (let i = 0; i <= lights.length; i++) {
              const l = states[lights[i]]
              vars._items.push({
                entity_id: l.entity_id,
                icon: l.attributes.icon || 'mdi:lightbulb',
                symbol: `${i+1}`,
                tooltip: l.attributes.friendly_name,
                display: 'block'
              })
            }
          }
          
          // Get the grid config
          let grid = vars.__grid
          grid.items = []
          
          // Get quantity of supplied items
          grid.qty = Number(vars._items.length)

          // Build build the grid columns
          grid.columns_qty = Math.min(Math.max(vars.__qty, grid.columns_min), grid.columns_max)
          grid.columns = `repeat(${grid.columns_qty}, ${vars.colummn_unit})`
          
          for (let p = 0; p < grid.pattern.length; p++) {
            const row = grid.pattern[p]
            let rsp = p ? ' ' : ''
            
            grid.rows += `${rsp}${row.row_unit}`
            grid.areas += `${rsp}\"${row.area_pre}`

            // Build the areas dynamically
            for (let i = 0; i <= grid.columns_qty; i++) {
              if (i === grid.columns_qty) {
                grid.areas += `${row.area_post}\"`
              } else {
                const csp = i ? ' ' : ''
                const aid = row.seq ? i+1 : ''

                if (i >= row.start && i <= row.limit) {
                  grid.areas += `${csp}${row.area_id}${aid}`
                }
              }
            }
          }

          // Dynamically assign `custom_field` defaults and create objects up to `colums_max`
          for (let i = 0; i < grid.columns_max; i++) {
            let gid = i+1

            if(i < grid.columns_qty) {
              // Insert any fields which weren't provided to avoid complications
              grid.items.push({...vars.__defaults.merge, ...vars._items[i]})
            } else {
              grid.items.push(vars.__defaults.filler)
            }
          }
        }
      ]]]
  # custom_fields:
  #   grid_helper: >
  #     [[[
  #       const out = variables.__buildGrid(variables)
  #       variables.__items = out.items
  #       variables.__grid = out.grid
  #     ]]]
  # styles:
  #   custom_fields:
  #     grid_helper:
  #       - visability: hidden
  #       - height: 0
  #       - width: 0
  styles:
    grid:
      - grid-template-areas: >
          [[[
            const out = variables.__buildGrid(variables)
            variables.__items = out.items
            variables.__grid = out.grid

            console.log(':::: Areas ::::>', variables); 
            
            return variables.__grid.areas
          ]]]
      - grid-template-columns: "[[[ return variables.__grid.columns ]]]"
      - grid-template-rows: "[[[ return variables.__grid.rows ]]]"
      - justify-items: center
      - align-items: center
      - padding: 2px


#### WF::BCT ############| Light Group |############ github.com/wfurphy #####>
light_group:
  template:
    - light_grid_helper
    - light
    # - debug
  color: auto
  # color_type: card
  variables:
    _items: []
    _height: 100px
    __defaults:
      merge:
        entity_id:
        icon: mdi:lightbulb
        symbol:
        display: "block"
      filler:
        entity_id: "[[[ return entity.entity_id ]]]"
        icon: mdi:lightbulb
        symbol: mdi:cancel
        display: "none"
    __grid:
      areas: ""
      columns: ""
      rows: ""
      columns_min: 2
      columns_max: 6
      column_unit: '1fr'
      pattern:
        - seq: false
          start: 2
          limit: false
          area_id: 'n'
          area_pre: 'i i'
          area_post: ''
          row_unit: 1fr
        - seq: true
          start: 0
          limit: false
          area_id: li
          area_pre: ''
          area_post: ''
          row_unit: 2fr
        - area_id: 'l'
          start: 2
          limit: false
          area_pre: ''
          area_post: ''
          seq: false
          row_unit: 1fr
  # styles:
  #   grid:
  #     - grid-template-areas: >
  #         [[[
  #           console.log(':::: Areas ::::>', variables); 
            
  #           return variables.__grid.areas
  #         ]]]
  #     - grid-template-columns: "[[[ return variables.__grid.columns ]]]"
  #     - grid-template-rows: "[[[ return variables.__grid.rows ]]]"
      # - grid-template-areas: '"i i n n n n n n" ". l1 l2 l3 l4 l5 l6 ." "l l l l l l l l"'
      # - grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr
      # - justify-items: center
      # - align-items: center
      # - padding: 2px
    label:
      - justify-self: center
      - align-self: start
      - text-align: center
    name:
      - justify-self: start
      - align-self: center
      - text-align: left
    custom_fields:
      li1:
        - display: "[[[ return variables.__items[0].display ]]]"
      li2:
        - display: "[[[ return variables.__items[1].display ]]]"
      li3:
        - display: "[[[ return variables.__items[2].display ]]]"
      li4:
        - display: "[[[ return variables.__items[3].display ]]]"
      li5:
        - display: "[[[ return variables.__items[4].display ]]]"
      li6:
        - display: "[[[ return variables.__items[5].display ]]]"
  custom_fields:
    li1:
      card:
        type: custom:button-card
        template: button_mini_embed
        entity: "[[[ return variables.__items[0].entity_id ]]]"
        icon: "[[[ return variables.__items[0].icon ]]]"
        color: auto
        variables:
          _item: "[[[ return variables.__items[0] ]]]"
    li2:
      card:
        type: custom:button-card
        template: button_mini_embed
        entity: "[[[ return variables.__items[1].entity_id ]]]"
        icon: "[[[ return variables.__items[1].icon ]]]"
        color: auto
        variables:
          _item: "[[[ return variables.__items[1] ]]]"
    li3:
      card:
        type: custom:button-card
        template: button_mini_embed
        entity: "[[[ return variables.__items[2].entity_id ]]]"
        icon: "[[[ return variables.__items[2].icon ]]]"
        color: auto
        variables:
          _item: "[[[ return variables.__items[2] ]]]"
    li4:
      card:
        type: custom:button-card
        template: button_mini_embed
        entity: "[[[ return variables.__items[3].entity_id ]]]"
        icon: "[[[ return variables.__items[3].icon ]]]"
        color: auto
        variables:
          _item: "[[[ return variables.__items[3] ]]]"
    li5:
      card:
        type: custom:button-card
        template: button_mini_embed
        entity: "[[[ return variables.__items[4].entity_id ]]]"
        icon: "[[[ return variables.__items[4].icon ]]]"
        color: auto
        variables:
          _item: "[[[ return variables.__items[4] ]]]"
    li6:
      card:
        type: custom:button-card
        template: button_mini_embed
        entity: "[[[ return variables.__items[5].entity_id ]]]"
        icon: "[[[ return variables.__items[5].icon ]]]"
        color: auto
        variables:
          _item: "[[[ return variables.__items[5] ]]]"


#########################################################################/

