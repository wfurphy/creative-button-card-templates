#### Value Strip Item ######################################################>
value_strip_item:
  template:
  - style_addons
  - transparent
  variables:
    _item:
      active: false
      prefix: ''
      suffix: ''
      value: 100
      icon: mdi:bomb
      label: null
      active_color: 'var(--paper-item-icon-active-color)'
      color: 'var(--paper-item-icon-color)'
    _show:
      icon: true
      value: true
      fade: true
  name: >
    [[[
      variables.__opc = (variables._item.value / 100) + 0.07
      variables.__both = variables._show.icon && variables._show.value
      
      if (variables._item.label) return html`<span class="wfbc-item-value label">${variables._item.label}</span>`

      return html`<span class="wfbc-item-prefix">${variables._item.prefix}</span><span class="wfbc-item-value">${variables._item.value}</span><span class="wfbc-item-suffix">${variables._item.suffix}</span>`
    ]]]
  custom_fields:
    active_logic: >
      [[[
        variables._item.active = entity.state == variables._item.value
      ]]]
  icon: "[[[ return variables._item.icon ]]]"
  lock:
    enabled: "[[[ return variables.__lock = !entity || entity.state == 'unavailable' ]]]"
  styles:
    grid:
      - grid-template-areas: >
          [[[
            if (variables.__both) return '\"i\" \"n\"';
            return variables._show.icon ? '\"i\"' : '\"n\"'
          ]]]
      - grid-template-columns: 1fr
      - grid-template-rows: "[[[ return variables.__both ? '1fr 1fr' : '1fr' ]]]"
      - justify-items: center
      - align-items: center
    name:
      - display: "[[[ return variables.__both || variables._show.value ? 'inline-flex' : 'none' ]]]"
      - opacity: >
          [[[
            if (variables.__lock) return 0.1;
            return (!variables._show.fade || variables.__opc > 1) ? 1 : variables.__opc
          ]]]
      - color: >
          [[[
            // console.log('::name-color::|' + variables._item.value + '|::>', variables._item.active, variables) 
            return variables._item.active ? variables._item.active_color : variables._item.color 
          ]]]
      - font-size: "[[[ return variables.__both ? '14px' : '16px' ]]]"
      - align-self: "[[[ return variables.__both ? 'start' : 'center' ]]]"
    card:
      - height: 40px
    lock:
      - opacity: 0
    custom_fields:
      active_logic:
        - width: 0
        - height: 0
        # - display: none
        - visibility: hidden
    icon:
      - width: "[[[ return variables.__both ? '30px' : '60%' ]]]"
      - display: "[[[ return variables.__both || variables._show.icon ? 'inline-flex' : 'none' ]]]"
      - color: >
          [[[
            // console.log('::icon-color::|' + variables._item.value + '|::>', variables._item.active, variables) 
            return variables._item.active ? variables._item.active_color : variables._item.color 
          ]]]
      - opacity: >
          [[[
            if (variables.__lock) return 0.1; 
            return (!variables._show.fade || variables.__opc > 1) ? 1 : variables.__opc
          ]]]
  extra_styles: |
    .wfbc-item-suffix {
      opacity: 0.6;
      font-size: 90%;
      margin-top: 5%
    }

#### Brightness Strip Item ######################################################>
brightness_strip_item:
  template: 
    - value_strip_item
  variables:
    _al_area_id: main_area
    _item:
      value: 100
  custom_fields: 
    active_logic: >
      [[[
        variables.__al = 'switch.adaptive_lighting_' + variables._al_area_id
        variables.__alb = 'switch.adaptive_lighting_adapt_brightness_' + variables._al_area_id
        variables._item.active = variables._item.value == states['input_number.brightness_' + variables._al_area_id].state
      ]]]
  lock:
    enabled: >
      [[[
        return variables.__lock = states[variables.__al].state == 'on' && states[variables.__alb].state == 'on'
      ]]]
  tap_action:
    action: call-service
    haptic: success
    service: script.al_set
    service_data:
      area_id: "[[[ return variables._al_area_id ]]]"
      brightness: "[[[ return variables._item.value ]]]"


#### Cover Strip Item ######################################################>
cover_strip_item:
  template: value_strip_item
  variables:
    _item:
      value: 100
  custom_fields:
    active_logic: >
      [[[
        variables._item.active = entity.attributes.current_position == variables._item.value
      ]]]
  tap_action:
    action: call-service
    service: cover.set_cover_position
    haptic: success
    service_data:
      entity_id: "[[[ return entity.entity_id ]]]"
      position: "[[[ return variables._item.value ]]]"

#### Value Strip ######################################################>
value_strip:
  show_icon: false
  show_value: false
  show_state: false
  show_name: false
  variables:
    _type: value
    _al_area_id: null
    _triggers: []
    _items: []
    _show:
      icon: false
      value: true
      fade: true
    __defaults:
      - value: 10
        active: false
        prefix: null
        suffix: '%'
        icon: mdi:brightness-3
        label: null
        active_color: 'var(--paper-item-icon-active-color)'
        color: 'var(--paper-item-icon-color)'
      - value: 25
        active: false
        prefix: null
        suffix: '%'
        icon: mdi:brightness-4
        label: null
        active_color: 'var(--paper-item-icon-active-color)'
        color: 'var(--paper-item-icon-color)'
      - value: 50
        active: false
        prefix: null
        suffix: '%'
        icon: mdi:brightness-5
        label: null
        active_color: 'var(--paper-item-icon-active-color)'
        color: 'var(--paper-item-icon-color)'
      - value: 75
        active: false
        prefix: null
        suffix: '%'
        icon: mdi:brightness-6
        label: null
        active_color: 'var(--paper-item-icon-active-color)'
        color: 'var(--paper-item-icon-color)'
      - value: 100
        active: false
        prefix: null
        suffix: '%'
        icon: mdi:brightness-7
        label: null
        active_color: 'var(--paper-item-icon-active-color)'
        color: 'var(--paper-item-icon-color)'
  styles:
    card:
      - clear: >
          [[[
            switch (variables._type) {
              case 'brightness':
                variables.__entity_id = 'light.al_lights_' + variables._al_area_id
                variables._triggers = ['switch.adaptive_lighting_' + variables._al_area_id, 'switch.adaptive_lighting_adapt_brightness_' + variables._al_area_id]
                break
              case 'cover':
              case 'value':
              default:
                variables.__entity_id = entity.entity_id
                break
            }

            return 'none'
          ]]]
      - height: 40px
    grid:
      - grid-template-areas: '"c1 c2 c3 c4 c5"'
      - grid-template-columns: 1fr 1fr 1fr 1fr 1fr
      - grid-template-rows: 1fr
      - justify-items: center
      - align-items: center
      - height: 40px
      - padding: 5px
      - margin-top: 5px
    custom_fields:
      c1:
        - width: 100%
      c2:
        - width: 100%
      c3:
        - width: 100%
      c4:
        - width: 100%
      c5:
        - width: 100%
  custom_fields:
    c1:
      card:
        type: custom:button-card
        template: "[[[ return variables._type + '_strip_item' ]]]"
        entity: "[[[ return variables.__entity_id ]]]"
        triggers_update: "[[[ return variables._triggers ]]]"
        variables: 
          _item: "[[[ return Object.assign(variables.__defaults[0], variables._items[0]) ]]]"
          _show: "[[[ return variables._show ]]]"
          _al_area_id: "[[[ return variables._al_area_id ]]]"
    c2:
      card:
        type: custom:button-card
        template: "[[[ return variables._type + '_strip_item' ]]]"
        entity: "[[[ return variables.__entity_id ]]]"
        triggers_update: "[[[ return variables._triggers ]]]"
        variables: 
          _item: "[[[ return Object.assign(variables.__defaults[1], variables._items[1]) ]]]"
          _show: "[[[ return variables._show ]]]"
          _al_area_id: "[[[ return variables._al_area_id ]]]"
    c3:
      card:
        type: custom:button-card
        template: "[[[ return variables._type + '_strip_item' ]]]"
        entity: "[[[ return variables.__entity_id ]]]"
        triggers_update: "[[[ return variables._triggers ]]]"
        variables: 
          _item: "[[[ return Object.assign(variables.__defaults[2], variables._items[2]) ]]]"
          _show: "[[[ return variables._show ]]]"
          _al_area_id: "[[[ return variables._al_area_id ]]]"
    c4:
      card:
        type: custom:button-card
        template: "[[[ return variables._type + '_strip_item' ]]]"
        entity: "[[[ return variables.__entity_id ]]]"
        triggers_update: "[[[ return variables._triggers ]]]"
        variables: 
          _item: "[[[ return Object.assign(variables.__defaults[3], variables._items[3]) ]]]"
          _show: "[[[ return variables._show ]]]"
          _al_area_id: "[[[ return variables._al_area_id ]]]"
    c5:
      card:
        type: custom:button-card
        template: "[[[ return variables._type + '_strip_item' ]]]"
        entity: "[[[ return variables.__entity_id ]]]"
        triggers_update: "[[[ return variables._triggers ]]]"
        variables:
          _item: "[[[ return Object.assign(variables.__defaults[4], variables._items[4]) ]]]"
          _show: "[[[ return variables._show ]]]"
          _al_area_id: "[[[ return variables._al_area_id ]]]"
  

#########################################################################/

